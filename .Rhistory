##Packages##
library(deSolve)
library(ggplot2)
library(ggtrendline)
Datos <- list(U_gluc_Y <- 0.0963,
K_gluc_Y <- 0.6397,
G_gluc_Y <- 55.482,
L_Y <- 0.1754249,
U_gluc_LAB <- 0.2004,
K_gluc_LAB <- 0.6367,
L_LAB <- 0.0030472,
Y_Glc_Y <- 225.32,
Y_Glc_LAB <-127.98,
estudio <- "Brazil - WB1",
compuesto <- "Glucose",
Tiempos <- c(0,6/24,12/24,24/24,30/24,36/24,48/24,54/24,60/24,72/24,84/24,96/24,120/24,144/24),
Variacion_glc <- c(55.482,26.802,16.311,13.706,13.248,7.54,1.278,2.694,3.08,0.757,2.465,2.673,3.183,7.631))
state1 <-c(y = Datos[[3]]) # Initial status
times1 <-seq(0,6,1/100)
parameters1 <-c(Y1=Datos[[8]], Y2=Datos[[9]])
#Glucose_Y
U_Yeast_Glc <- (Datos[[1]]*Datos[[3]]/Datos[[3]]+Datos[[2]]*Datos[[4]])*Datos[[4]]
U_LAB_Glc <- (Datos[[5]]*Datos[[3]]/Datos[[3]]+Datos[[6]]*Datos[[7]])*Datos[[7]]
constate <- c(4.5)
#ODE#
for (i in constate) {
ODE1<-function(times,state,parameters){
y<-state[1]
Y1<-parameters[1]
Y2<-parameters[2]
dy<--Y1*U_Yeast_Glc/i*y-Y2*U_LAB_Glc/i*y
res<-dy
list(res)
}
#NUMERICAL SOLUTION OF THE EQUATION#
solution1 <-lsoda(state1, times1, ODE1, parameters1)
solution1
# (ii) Experimental article data#
## Graph
Solucion <- as.data.frame(solution1)
Datos_exp <- data.frame(Tiempos = Datos[[12]], Glucosa =Datos[[13]])
## x and y axis
eje_titulo <- paste("Experimental Data", Datos[[10]])
eje_y <- paste(Datos[[11]],"Glucose(mg/g)")
eje_x <- "Time(days)"
## Plot
grafo <- ggplot(data = Solucion, aes(x = time, y = y))+
geom_line(colour = "red", size =0.9)+
geom_point(data = Datos_exp, aes(x = Tiempos, y = Glucosa), colour  = "blue")+
labs(y = eje_y, x = eje_x, title = eje_titulo)
print(grafo)
}
Tiempo <- Solucion$time; Tiempo <- Tiempo[-1]
Consumo_glucosa <- Solucion$y; Consumo_glucosa <- Consumo_glucosa[-1]
Solucion <- data.frame(Tiempo, Consumo_glucosa)
modelos <- c("line2P", "line3P", "log2P", "exp2P", "power2P", "power3P")
for (i in modelos) {
p <- ggtrendline(Solucion$Tiempo, Solucion$Consumo_glucosa, model = i, CI.level = 0.95, CI.alpha = 0.05)+
labs(x = "Time(days)", y = "Glucose(mg/g)")
print("######################################################")
print(p)
print("######################################################")
}
library(circlize)
library(RColorBrewer)
m <- read.csv2("C:\\Users\\usuario\\Desktop\\AbundanceRplot\\FINALCHORD2.csv")
m <- as.matrix(m)
View(m)
# Asegurarse de que la matriz sea numérica y no tenga valores faltantes
m[is.na(m)] <- 0
# Definir los nombres de las filas y columnas
row_names <- c(
"Aspergillus flavus",
"Hanseniaspora opuntiae",
"Pichia kudriavzevii",
"Pichia manshurica",
"Saccharomyces cerevisiae",
"Acetobacter",
"Acetobacter ascendens",
"Acetobacter ghanensis",
"Acetobacter orientalis",
"Acetobacter pasteurianus",
"Acetobacter senegalensis",
"Bacillus",
"Citrobacter gillenii",
"Enterobacter",
"Enterobacter asburiae",
"Enterobacter cloacae",
"Escherichia coli",
"Klebsiella pneumoniae",
"Komagataeibacter",
"Lactobacillus",
"Lactobacillus fermentum",
"Lactobacillus mucosae",
"Lactobacillus suebicus",
"Lactobacillus vaccinostercus",
"Lelliottia amnigena",
"Limosilactobacillus",
"Paucilactobacillus",
"Pediococcus",
"Pediococcus acidilactici",
"Pseudomonas",
"Serratia",
"Shigella dysenteriae",
"Yersinia"
)
col_names <- c("Y", "LAB", "AAB", "Others")
rownames(m) <- row_names
colnames(m) <- col_names
# Definir los grupos de las especies
species_groups <- c(
"Aspergillus flavus" = "Others",
"Hanseniaspora opuntiae" = "Y",
"Pichia kudriavzevii" = "Y",
"Pichia manshurica" = "Y",
"Saccharomyces cerevisiae" = "Y",
"Acetobacter" = "AAB",
"Acetobacter ascendens" = "AAB",
"Acetobacter ghanensis" = "AAB",
"Acetobacter orientalis" = "AAB",
"Acetobacter pasteurianus" = "AAB",
"Acetobacter senegalensis" = "AAB",
"Bacillus" = "Others",
"Citrobacter gillenii" = "Others",
"Enterobacter" = "Others",
"Enterobacter asburiae" = "Others",
"Enterobacter cloacae" = "Others",
"Escherichia coli" = "Others",
"Klebsiella pneumoniae" = "Others",
"Komagataeibacter" = "AAB",
"Lactobacillus" = "LAB",
"Lactobacillus fermentum" = "LAB",
"Lactobacillus mucosae" = "LAB",
"Lactobacillus suebicus" = "LAB",
"Lactobacillus vaccinostercus" = "LAB",
"Lelliottia amnigena" = "Others",
"Limosilactobacillus" = "LAB",
"Paucilactobacillus" = "LAB",
"Pediococcus" = "LAB",
"Pediococcus acidilactici" = "LAB",
"Pseudomonas" = "Others",
"Serratia" = "Others",
"Shigella dysenteriae" = "Others",
"Yersinia" = "Others"
)
# Ordenar las filas de la matriz según los grupos
ordered_species <- c(
names(which(species_groups == "Y")),
names(which(species_groups == "LAB")),
names(which(species_groups == "AAB")),
names(which(species_groups == "Others"))
)
m <- m[ordered_species, ]
# Asignar colores a los grupos
colors <- c("Y" = "#FF6347", "LAB" = "#FFD700", "AAB" = "#ADFF2F", "Others" = "#87CEEB")
# Asignar los colores de las especies según su grupo
species_colors <- colors[species_groups[ordered_species]]
# Crear un vector de colores para las filas y columnas
grid.col <- c(species_colors, colors)
# Verificar que grid.col tenga nombres correspondientes a todos los sectores
names(grid.col) <- c(ordered_species, col_names)
# Graficar el diagrama de cuerdas con las etiquetas personalizadas
chordDiagram(m, annotationTrack = c("grid"), grid.col = grid.col, transparency = 0.3, link.lwd = 0.5, link.lty = 1, link.border = 1)
# Personalizar las etiquetas
circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim", track.index = 1)
ylim = get.cell.meta.data("ylim", track.index = 1)
sector.name = get.cell.meta.data("sector.index")
# Si el sector es una columna, poner etiqueta horizontal
if (sector.name %in% col_names) {
circos.text(mean(xlim), ylim[2] + 0.8, sector.name, facing = "outside", cex = 0.8, niceFacing = TRUE, adj = c(0.7, 0.7))
} else {
circos.text(mean(xlim), mean(ylim), sector.name, facing = "clockwise", cex = 0.4, niceFacing = TRUE, adj = c(0))
}
circos.axis(h = "bottom", labels.cex = 0.4, major.tick.length = 0.3, sector.index = sector.name, track.index = 1)
}, bg.border = NA)
